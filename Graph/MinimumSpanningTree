class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b)->a.second-b.second);
        pq.add(new Pair(0,0));
        
        int sum=0;
        boolean[] vis=new boolean[V];
        
        while(!pq.isEmpty()){
            int node=pq.peek().first;
            int dist=pq.peek().second;
            pq.remove();
            
            if(vis[node]) continue;
            vis[node]=true;
            sum+=dist;
            
            for(int[] neigh:adj.get(node)){
                int next=neigh[0];
                int wgt=neigh[1];
                if(!vis[next]) pq.add(new Pair(next,wgt));
            }
        }
        return sum;
    }
}
